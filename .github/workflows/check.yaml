name: Fmt and Clippy

# This job runs rustfmt and clippy linting,

on:
  push:
    branches: main

  pull_request:
    branches: main

  workflow_dispatch: # allows manual trigger

env:
  RUST_FMT: nightly-2023-04-01-x86_64-unknown-linux-gnu
  RUST_CLIPPY: 1.65

jobs:
  "lint_fmt":
    name: lint:fmt
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - services/web3id-issuer/Cargo.toml
          - services/web3id-verifier/Cargo.toml
          - test-tools/web3id-test/Cargo.toml
          - test-tools/issuer-front-end/backend/Cargo.toml
          - examples/bots/discord-bot/Cargo.toml
          - examples/bots/telegram-bot/Cargo.toml
          - examples/some-issuer/Cargo.toml
          - examples/some-verifier/Cargo.toml
          - examples/some-verifier-lib/Cargo.toml
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_FMT }}
          override: true
          components: rustfmt
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=${{ matrix.crates }} -- --check

  "lint_clippy":
    name: lint:clippy
    needs: "lint_fmt"
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crates:
          - services/web3id-issuer/Cargo.toml
          - services/web3id-verifier/Cargo.toml
          - test-tools/web3id-test/Cargo.toml
          - test-tools/issuer-front-end/backend/Cargo.toml
          - examples/bots/discord-bot/Cargo.toml
          - examples/bots/telegram-bot/Cargo.toml
          - examples/some-issuer/Cargo.toml
          - examples/some-verifier/Cargo.toml
          - examples/some-verifier-lib/Cargo.toml
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_CLIPPY }}
          override: true
          target: ${{ env.TARGET }}
          components: rustfmt, clippy
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path ${{ matrix.crates }} --locked -- -D warnings

  "frontend:verifier":
    name: lint:check-frontends
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dirs:
          - examples/some-verifier/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Format
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn fmt-check
      - name: Lint
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn lint
      - name: Build
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn build

  "frontend:issuer":
    name: lint:check-frontends
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dirs:
          - examples/some-issuer/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Format
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn fmt-check
      - name: Lint
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn lint
      - name: Build
        working-directory: ${{ matrix.dirs }}
        run: yarn && yarn build-telegram && yarn build-discord
